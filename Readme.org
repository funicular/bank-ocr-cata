* KATA

* My approach :)
When I saw the specification a quickly implement a straightforward solution without any abstraction, protocol or additional namespace . Then i wrote this second version that I started with a matrix data point of view instead of a string data perspective. I think that modeling OCR problem as we see the numbers (that's to say as numbers defined in a grid) improve understanding of the final user requirements.

I know that most of people think that we don't need protocols to solve simple/shorts (or even almost always!) requirements but i wanted to show my interests when I think the problem, so i tried to show my abstacting skills here :) . As you can see I like namespaces to identify the code inside them. Also I like protocols as a way to understand the different roles/behaviours behind the courtains.
The current state of this code is not finished but contains a good state IMHO


the code is written in cljs to target nodejs, for developing it I used emacs/CIDER and figwheel

enjoy it!



* how to use this project

Requirements:

you'll need lein, npm, node and git installed


   #+BEGIN_SRC shell :exports code

git clone https://github.com/funicular/bank-ocr-cata.git
npm install
lein cljsbuild once prod
node server.js
   #+END_SRC shell :exports code

** interactive development

To start interactive development, open a REPL using provided project.clj . 
Then type =(dev)= and follow instructions that will show in the REPL.

1. start repl  =lein repl=
2. type =(dev)=
3. when you see these last lines 
#+BEGIN_SRC
Successfully compiled "target/server_dev/bank_ocr_cata.js" in 18.92 seconds.
Type in a new terminal: "node target/server_dev/bank_ocr_cata.js" 
... and then type in the repl: "(cljs-repl)" 
#+END_SRC


4. open a new terminal and enter =node target/server_dev/bank_ocr_cata.js=
5. and insert into the REPL: =(cljs-repl)=


** specification
[[./bank_ocr_kata.md][bank_ocr_kata.md]]

** generating this cljs+node project

 + Environment used in development:

   #+BEGIN_SRC shell :exports code

   $ java -version

   java version "1.7.0_75"
   Java(TM) SE Runtime Environment (build 1.7.0_75-b13)
   Java HotSpot(TM) 64-Bit Server VM (build 24.75-b04, mixed mode)


   $ lein -v
   Leiningen 2.6.1 on Java 1.7.0_75 Java HotSpot(TM) 64-Bit Server VM

   #+END_SRC


 + [[https://github.com/malyn/figwheel-node-template][figwheel-node-template]]

   #+BEGIN_SRC shell :exports code

    lein new figwheel-node bank-ocr-cata
    cd bank-ocr-cata
    npm install

   #+END_SRC

** tools

+ [[https://github.com/bhauman/lein-figwheel][lein-figwheel]]

+ [[https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-within-NRepl][using emacs with figwheel]]



